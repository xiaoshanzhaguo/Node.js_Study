/*
    文件系统（File System）
        - 文件系统，简单来说就是通过Node来操作系统中的文件
        （比如在桌面中新建一个txt文本文件，通过nodejs对这些文件进行增删改查的操作，我们可以打开文件，
          向文件里去写入一些内容，然后去保存文件，之前我们是通过图形化界面去操作，现在有了Node的文件系统，就可以用Nodejs对这些东西进行操作。）

        - 使用文件系统，需要先引入fs模块，fs是核心模块，直接引入不需要下载（而Buffer是Nodejs自带的，直接使用，连引入都不需要）

    同步文件的写入
        - 手动操作的步骤：
            1. 打开文件
                fs.openSync(path, flags[, mode])
                    - path 要打开文件的路径
                    - flags 打开文件要做的操作的类型 只读 写 读+写 追加 覆盖
                        r 只读
                        w 可写
                    - mode 设置文件的操作权限，一般不传，一般省略
                    （这里一般是对Linux起作用，在Windows里一般不用，Windows里一般不传）

                    返回值
                    - 该方法会返回一个文件的描述符作为操作，我们可以通过该描述符来对文件进行各种操作
            2. 向文件中写入内容
                fs.writeSync（fd, string[, position[, encoding]]）
                    - fd 文件的描述符，需要传递要写入的文件的描述符   往哪个文件里写？
                    - string 要写入的内容
                    - position 写入的起始位置 一般都不传
                    - encoding 写入的编码 默认为utf-8 因为我们默认就需要utf-8
                    position和encoding一般不传 position是写入的起始位置，encoding表示写入的编码

            3. 保存并关闭文件
            （其实在我们写入的时候，就自动保存了，这个保存就完成了，功能都出来了，但是还是要关闭文件。
            在我们运行文件后，程序停止后，文件会自动关闭，文件会被释放
            而如果程序运行在服务器中，服务器是不能停止的，它是运行在一个循环里，会持续得运行
            因此打开文件，文件就会在内存中存在，写入完后文件还在，如果不进行关闭的话，就会一直占用我们的内存空间，打开过多文件时，计算机就会司机
            在目前的测试文件里，关不关都可以，因为程序已经结束了）

            fs.closeSync(fd)
                - fd 要关闭的文件的描述符 你要关闭哪个文件？


        (同步方法好理解，异步方法不好理解，但是性能较好)
 */

//这个适合大批量的运行

var fs = require("fs");

// console.log(fs);

//打开文件
var fd = fs.openSync("hello.txt", "w"); //这里是在内存里打开了，这里会有一个返回值]

console.log(fd); //这里会输出3，告诉我们他打开了文件，编号是3，待会我们要操作3号文件，就会对这个文件进行操作

//向文件中写入内容
fs.writeSync(fd, "今天的天气真不错~~~", 20); //20表示从索引为20的位置开始往后写

//关闭文件
fs.closeSync(fd);  //其实不加这行代码，运行结果没有任何区别，但是这样的代码更为合理，更省内存空间

console.log("程序向下执行~~");
